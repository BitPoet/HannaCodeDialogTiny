<?php namespace ProcessWire;


/**
 * UI plugin that adds dialogs for Hanna Codes in InputfieldTinyMCE.
 * This is a shameless adaption of Robin Sallis' famous HannaCodeDialog
 * module for InputfieldCKEditor.
 */
class HannaCodeDialogTiny extends WireData implements Module, ConfigurableModule {

	/**
	 * Module information
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Hanna Code Dialog TinyMCE',
			'version' => '0.1.2',
			'summary' => 'Enhances the use of Hanna tags in TinyMCE fields, including the dialog-based editing of Hanna tags.',
			'author' => 'BitPoet',
			'icon' => 'clone',
			'autoload' => 'template=admin',
			'singular' => true,
			'requires' => 'ProcessWire>=3.0.218, InputfieldTinyMCE, TextformatterHannaCode, PHP>=7.0',
		);
	}

	/**
	 * Array of Hanna tags that have no attributes
	 */
	protected $tags_no_attributes = [];

	/**
	 * Ready
	 */
	public function ready() {
		$this->addHookAfter("ProcessPageEdit::execute", $this, "addPlugins");
		$this->addHookAfter("InputfieldTinyMCE::render", $this, "setNonEditClass");
	}
	
	/**
	 * Set noneditable_class setting
	 */
	public function setNonEditClass(HookEvent $event) {
		$out = $event->return;
		$inputfield = $event->object;
		$script = "<script>ProcessWire.config.InputfieldTinyMCE.settings." . $inputfield->attr('name') . ".noneditable_class = 'noneditable';</script>";
		$event->return = $script . $out;
	}


	/**
	 * Add plugin to TinyMCE in ProcessPageEdit
	 */
	public function addPlugins(HookEvent $event) {
		
		$config = $this->wire()->config;

		// Return if loaded via AJAX (image field)
		if($config->ajax) return;

		if($this->input->get('InputfieldFileAjax')) return;
		
		$pg = $event->object->getPage();
		$hasTMCE = false;
		foreach($pg->template->fields as $f) {
			if($f->type instanceof FieldtypeTextarea && $f->type->getInputfield($pg, $f) instanceof InputfieldTinyMCE) {
				$hasTMCE = true;
				break;
			}
		}
		if(! $hasTMCE) return;
		
		// Get edited page
		if($event->wire()->process instanceof ProcessProfile) {
			$edited_page = $event->wire()->user;
		} else {
			$edited_page = $event->object->getPage();
		}

		// To config JS
		$settings = [];
		$data = $this->wire()->modules->getModuleConfigData('TextformatterHannaCode');
		$settings['iframe_path'] = "{$this->wire()->input->url}?id={$edited_page->id}&modal=1";
		$settings['open_tag'] = !empty($data['openTag']) ? $data['openTag'] : \TextformatterHannaCode::DEFAULT_OPEN_TAG;
		$settings['close_tag'] = !empty($data['closeTag']) ? $data['closeTag'] : \TextformatterHannaCode::DEFAULT_CLOSE_TAG;
		$settings['hanna_tags'] = $this->getDropdownTags($edited_page);
		$settings['tags_no_attributes'] = $this->tags_no_attributes;
		$settings['widget_colour'] = $this->widget_colour ?: '#d3eaf2';
		$settings['dropdown_title'] = $this->_('Insert Hanna tag');
		$settings['dialog_title'] = $this->_('Hanna Code Dialog');
		$settings['dropdown_icon'] = $config->urls->{$this} . "img/hannadropdown.svg";
		$settings['hover_title'] = $this->_('Doubleclick to edit');
		
		$config->js($this->className, $settings);

		// Add CSS
		$info = $this->getModuleInfo();
		$version = $info['version'];
		$config->styles->add($config->urls->{$this} . "{$this}.css?v={$version}");
		
		$event->return = "<script>var hcdt_config = config.HannaCodeDialogTiny;</script>" . $event->return;
	}




	/**
	 * Get Hanna Code tags from database
	 *
	 * @param bool $name_only
	 * @param bool $filter_tags
	 * @return array
	 */
	public function getHannaTags($name_only = false, $filter_tags = false) {
		// Instantiate TextformatterHannaCode
		$hanna = $this->wire()->modules->get('TextformatterHannaCode');
		// Fetch Hanna Code tags from database
		$tags = [];
		$tags_no_attributes = [];

		$sql = "SELECT name, code FROM hanna_code ORDER BY name";
		$query = $this->wire()->database->prepare($sql);
		$query->execute();
		while($row = $query->fetch(\PDO::FETCH_NUM)) {
			list($name, $code) = $row;
			// If this tag has no attributes then add it to $tags_no_attributes
			if(strpos($code, 'hc_attr*' . '/') === false) $tags_no_attributes[] = $name;
			if($name_only) {
				if($filter_tags) {
					$exclude_prefix = $this->exclude_prefix ?: '_';
					if((is_array($this->exclude_selection) && in_array($name, $this->exclude_selection)) || strpos($name, $exclude_prefix) === 0) continue;
				}
				$tags[] = $name;
			} else {
				if($filter_tags) {
					$exclude_prefix = $this->exclude_prefix ?: '_';
					if((is_array($this->exclude_selection) && in_array($name, $this->exclude_selection)) || strpos($name, $exclude_prefix) === 0) continue;
				}
				if(version_compare($hanna->getModuleInfo()['version'], 20, '<='))
					$attrs = $hanna->extractDefaultCodeAttrs($code);
				else
					$attrs = $hanna->hannaCodes()->get($name)->attrs();
				$tags[$name] = $attrs;
			}
		}
		$this->tags_no_attributes = $tags_no_attributes;
		return $tags;
	}

	/**
	 * Get Hanna Code tags for toolbar dropdown
	 *
	 * @param Page $page The page being edited
	 * @return array Array of tag names
	 *
	 */
	public function ___getDropdownTags($page) {
		return $this->getHannaTags(false, true);
	}

	/**
	 * Build dialog form
	 *
	 * @param string $tag_name
	 * @param Page $edited_page
	 * @param array $current_attributes
	 * @param array $default_attributes
	 * @return InputfieldForm $form
	 */
	public function ___buildForm($tag_name, $edited_page, $current_attributes, $default_attributes) {
		/* @var InputfieldForm $form */
		$form = $this->modules->get('InputfieldForm');
		$form->attr('id+name', 'hanna-form');
		$form->attr('data-name', $tag_name);
		return $form;
	}

	/**
	 * Prepare options for use in dialog inputfield
	 *
	 * @param string $options_string String of options delimited with a pipe character
	 * @param string $attribute_name The name of the attribute the options are for
	 * @param string $tag_name The name of the Hanna tag
	 * @param object $page The page being edited
	 * @return array A regular array of option values, or an associative array $value => $label
	 *
	 */
	public function ___prepareOptions($options_string, $attribute_name, $tag_name, $page) {
		$options = explode('|', $options_string);
		return $options;
	}

	/**
	 * Find an return an array of all attributes in string $expression
	 * Lifted from TextformatterHannaCode
	 *
	 * @param string $expression
	 * @return array
	 *
	 */
	protected function getAttributes($expression) {
		$attrs = [];
		$regx =
			'!(?:^|\b)' .		    // beginning or boundary
			'([-_a-z0-9]+)' .	    // 1. attribute name
			'\s*=\s*' . 		    // Equals
			'(' .				    // 2. attribute value, possibly with quotes
			'(["\']|&quot;)' .	    // 3. open quote
			'.*?' . 		        // attribute value unquoted
			'\3' .			        // close quote
			'|' .				    // OR
			'[^\'",\s]*' .		    // unquoted value...
			'),?' . 			    // optional comma, per PW selector style
			'!i';
		if(!preg_match_all($regx, $expression, $matches)) {
			return $attrs;
		}
		foreach($matches[1] as $key => $name) {
			$attrs[$name] = trim($matches[2][$key], "'\"");
		}
		if(empty($attrs['name'])) {
			// allow for optional [[name_here attrs]] expression
			// where the 'name' isn't specifically called out as an attribute
			// but is the first symbol in the expression
			if(preg_match('!^([-_a-z0-9]+)([\s,]|$)!i', $expression, $matches)) {
				$attrs['name'] = $matches[1];
			}
		}
		return $attrs;
	}


	/**
	 * Config inputfields
	 *
	 * @param InputfieldWrapper $inputfields
	 */
	public function getModuleConfigInputfields(InputfieldWrapper $inputfields) {
		$modules = $this->wire()->modules;

		/* @var InputfieldText $f */
		$f = $modules->InputfieldText;
		$f_name = 'exclude_prefix';
		$f->name = $f_name;
		$f->label = $this->_('Exclude prefix');
		$f->description = $this->_('Tags that have this prefix will not appear in the toolbar dropdown.');
		$f->columnWidth = 50;
		$f->value = $this->$f_name ?: '_';
		$inputfields->add($f);

		/* @var InputfieldAsmSelect $f */
		$f = $modules->InputfieldAsmSelect;
		$f_name = 'exclude_selection';
		$f->name = $f_name;
		$f->label = $this->_('Exclude Hanna tags');
		$f->description = $this->_('Tags that are selected here will not appear in the toolbar dropdown.');
		$f->columnWidth = 50;
		foreach($this->getHannaTags(true) as $select_option) {
			$f->addOption($select_option);
		}
		$f->value = $this->$f_name;
		$inputfields->add($f);
	}



	public function ___install() {
		$mod = $this->modules->get('InputfieldTinyMCE');
		$mod->addPlugin('/site/modules/' . $this->className() . '/plugins/hannadialog/hannadialog.js');
		$mod->addPlugin('/site/modules/' . $this->className() . '/plugins/hannadropdown/hannadropdown.js');
	}
	
	public function ___uninstall() {
		$mod = $this->modules->get('InputfieldTinyMCE');
		$mod->removePlugin('/site/modules/' . $this->className() . '/plugins/hannadropdown/hannadropdown.js');
		$mod->removePlugin('/site/modules/' . $this->className() . '/plugins/hannadialog/hannadialog.js');
	}


}
